from typing import Dict

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
# Stages
from telegram.ext import ContextTypes

from bot.context.state import State
from bot.db import get_user

START_ROUTES = "START_STAGE"
APARTMENTS = "APARTMENTS_STAGE"
HOUSES = "HOUSES_STAGE"
SUBSCRIPTION = "SUBSCRIPTION_STAGE"
ADMIN_MENU = "ADMIN_STAGE"
END_ROUTES = "END_STAGE"
# Callback data
APARTMENTS_STATE = 'APARTMENTS_STATE'
HOUSES_STATE = 'HOUSES_STATE'
SUBSCRIPTION_STATE = 'SUBSCRIPTION_STATE'
TOTAL_USERS = 'TOTAL_USERS'
RECENT_HOUR_USERS = 'RECENT_HOUR_USERS'
TOTAL_SUBSCRIBED_USERS = 'TOTAL_SUBSCRIBED_USERS'

# Other constants

ADMIN_MENU_CALLBACK = 'admin_menu'
ACTION_NEXT = 'n'
ACTION_BACK = 'b'
MAIN_MENU = 'm'
REFRESH_DB = 'refresh_db'
SUBSCRIPTION_MODE = 'sub'
MAIN_MENU_TEXT = 'üè†Ô∏è'
LOAD_MORE_LINKS_TEXT = "–ü–æ–∫–∞–∑–∞—Ç–∏ —â–µ ‚§µÔ∏è"
LOAD_MORE_LINKS_BTN_TEXT = "–°—Ö–æ–∂–µ —Ç—É—Ç —î —â–µ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –¥–ª—è —Ç–µ–±–µ ‚ùóÔ∏è"
MAIN_MENU_BTN_TEXT = "‚¨ÖÔ∏è"
WELCOME_TEXT = "–í—ñ—Ç–∞—î–º–æ –≤–∞—Å –≤ –±–æ—Ç—ñ –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ. –û–±–µ—Ä—ñ—Ç—å –±–∞–∂–∞–Ω—É –ø–æ—Å–ª—É–≥—É."
CANCEL_SUBSCRIPTION = 'CANCEL_SUBSCRIPTION'
SUBSCRIPTION_TEXT = "–¶–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, " \
                    "–∫–æ–ª–∏ –∑ º—è–≤–ª—è—é—Ç—å—Å—è –æ–± º–µ–∫—Ç–∏ –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä—ñ—è–º –ø–æ—à—É–∫—É." \
                    " –î–ª—è —Ç–æ–≥–æ —â–æ–± –¥–æ–¥–∞—Ç–∏ –∫—Ä–∏—Ç–µ—Ä—ñ—ó –¥–æ –ø–æ—à—É–∫—É –æ–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ç–∏–ø –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ."
SHOW_NEXT_PAGE = 'else'
SHOW_ITEMS_PER_PAGE = 3
NEXT_PAGE_BTN = [InlineKeyboardButton(LOAD_MORE_LINKS_TEXT,
                                      callback_data='{"%s": 1}' % SHOW_NEXT_PAGE)]
MAIN_MENU_BTN = InlineKeyboardButton(MAIN_MENU_TEXT,
                                     callback_data='{"%s": 1}' % MAIN_MENU)
MAIN_MENU_BTN_STATE = InlineKeyboardButton(MAIN_MENU_BTN_TEXT,
                                           callback_data=MAIN_MENU)

EMPTY_RESULT_TEXT = '–ù–∞–∂–∞–ª—å –∑–∞ –≤–∞—à–∏–º–∏ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏ –ø–æ—à—É–∫—É –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π—à–ª–æ—Å—å.' \
                    '\n–°–ø—Ä–æ–±—É–π—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ—à—É–∫—É,' \
                    '\n–∞–±–æ –ø—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ —Ä–æ–∑—Å–∏–ª–∫—É –Ω–æ–≤–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å.'
BACK_BTN = InlineKeyboardButton('‚¨ÖÔ∏è', callback_data='{"b":1}')
SUBSCRIPTION_BTN = InlineKeyboardButton('–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è üì©', callback_data='{"sub":1}')
THATS_ALL_FOLKS_TEXT = '–°—Ö–æ–∂–µ —â–æ —Ü–µ –≤—Å—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ,\n' \
                       '–ü—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ —Ä–æ–∑—Å–∏–ª–∫—É —â–æ–± –ø–µ—Ä—à–∏–º –∑–Ω–∞—Ç–∏ –ø—Ä–æ –Ω–æ–≤—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è'
# Main Menu Buttons

START_BUTTONS = {
    '–û—Ä–µ–Ω–¥–∞ –ö–≤–∞—Ä—Ç–∏—Ä üè¢': APARTMENTS_STATE,
    '–û—Ä–µ–Ω–¥–∞ –ë—É–¥–∏–Ω–∫—ñ–≤ üè°': HOUSES_STATE,
    '–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è üì©': SUBSCRIPTION_STATE,
}
SUBSCRIPTION_BUTTONS = {
    '–ö–≤–∞—Ä—Ç–∏—Ä–∏ üè¢': APARTMENTS_STATE,
    '–ë—É–¥–∏–Ω–∫–∏ üè°': HOUSES_STATE,
}

ADMIN_BUTTONS = {
    '–í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤': TOTAL_USERS,
    '–ó–∞ –º–∏–Ω—É–ª—É –≥–æ–¥–∏–Ω—É': RECENT_HOUR_USERS,
    '–í—Å—å–æ–≥–æ –∑ –ø—ñ–¥–ø–∏—Å–∫–æ—é': TOTAL_SUBSCRIBED_USERS,
    '–û–Ω–æ–≤–∏—Ç–∏ –±–∞–∑—É': REFRESH_DB
}
NEXT_ADDITIONAL_FILTER = '–î–∞–ª—ñ'


def NEXT_BTN(text, callback):
    return InlineKeyboardButton(text=text, callback_data=callback)


async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = await get_user(update)
    state = State()
    state.update_context(context)
    keyboard = await build_basic_keyboard(START_BUTTONS)
    if user.is_admin:
        keyboard.append([InlineKeyboardButton('–ú–µ–Ω—é –ê–¥–º—ñ–Ω–∞', callback_data=ADMIN_MENU_CALLBACK)])

    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.message:
        await update.message.reply_text(WELCOME_TEXT, reply_markup=reply_markup)
    elif update:
        await update.callback_query.edit_message_text(text=WELCOME_TEXT, reply_markup=reply_markup)


async def show_subscription_menu(update: Update):
    user = await get_user(update)
    keyboard = await build_basic_keyboard(SUBSCRIPTION_BUTTONS)
    text = SUBSCRIPTION_TEXT
    if user.subscription:
        keyboard.insert(0, [InlineKeyboardButton("–í—ñ–¥–º—ñ–Ω–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É ‚ùå",
                                                 callback_data=CANCEL_SUBSCRIPTION)])
        text = user.subscription_text
    keyboard.append([MAIN_MENU_BTN_STATE])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text(text=text, reply_markup=reply_markup, parse_mode='HTML')


async def show_admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, text_outer: str = None):
    user = await get_user(update)
    keyboard = await build_basic_keyboard(ADMIN_BUTTONS, items_in_row=1)
    keyboard.append([MAIN_MENU_BTN_STATE])
    reply_markup = InlineKeyboardMarkup(keyboard)
    base_text = f'–í—ñ—Ç–∞—î–º–æ {user.nickname}, —â–æ –∞–¥–º—ñ–Ω–∏–º–æ —Å—å–æ–≥–æ–¥–Ω—ñ?'
    text = base_text
    if text_outer is not None:
        text = text_outer

    await update.callback_query.edit_message_text(text=text, reply_markup=reply_markup, parse_mode='HTML')


async def build_basic_keyboard(btns_pattern: Dict, items_in_row: int = 2):
    keyboard = []
    row = []
    for k, v in btns_pattern.items():

        row.append(

            InlineKeyboardButton(k, callback_data=str(v)),

        )
        if len(row) == 2:
            keyboard.append(row)
            row = []
    if len(row):
        keyboard.append(row)
    return keyboard
